/////////////////////////////////////////////////////////////////////////////
#if defined(__BORLANDC__)
#pragma hdrstop
#pragma package(smart_init)
#endif
//---------------------------------------------------------------------------
#include "KIniFile.h"
#include <stdio.h>
#include "ExtFuncs.h"
#include "TextReader.h"
//---------------------------------------------------------------------------
using namespace Kway;
//---------------------------------------------------------------------------
static const std::string True_String ("true");
static const std::string False_String("false");

/////////////////////////////////////////////////////////////////////////////
// class TKIniFile::TReader
/////////////////////////////////////////////////////////////////////////////
class TKIniFile::TReader : public TTextReader
{
   typedef TTextReader  inherited;

   TSections&  Sections_;
   TSection*   Section_;
   char        RemarkChar_;

private:
   K_mf(std::string) Trim (const std::string&);

public:
   K_ctor TReader (const std::string& strFilePath, TSections& sections, char remChar)
      : inherited  (strFilePath.c_str(), fmRead)
      , Sections_  (sections)
      , Section_   (NULL)
      , RemarkChar_(remChar)
   {
      EStartMode startMode = (EStartMode)(sm_ReadAll | sm_TruncLeadSpaces | sm_TruncTailSpaces);

      Sections_.clear();
      inherited::StartNotifyReadLN(startMode);
   }

   K_mf(EOnLineResult) OnTextLine (const std::string& str)
   {
      if (str.empty())  return olr_Continue;

      std::string            strLine(str);
      std::string::size_type pos = strLine.find(RemarkChar_);
      // 移除註解部份
      if (pos != std::string::npos) {
         strLine.erase(pos);
         if (strLine.empty())
            return olr_Continue;
      }
      // 看看是不是 section
      if (strLine[0] == '[') {
         Section_ = NULL;
         pos = strLine.find(']');
         if (pos == std::string::npos)
            return olr_Continue;
         else
            strLine.erase(pos);
         
         std::string         strSection(strLine.substr(1));
         TSections::iterator iterSections = Sections_.fetch(strSection);
         
         Section_ = &(iterSections->second);

         return olr_Continue;
      }
      // 應該就是 value 了
      if (Section_ == NULL)  return olr_Continue;
      
      pos = strLine.find('=');
      if (pos == std::string::npos)
         return olr_Continue;

      // 去掉左右空白部分
      std::string        strKey(Trim(strLine.substr(0, pos)));
      std::string        strVal(Trim(strLine.substr(pos+1)));
      TSection::iterator iterSection = Section_->fetch(strKey);
      
      for(int L = 0; L < iterSection->second.size(); L++){
         if(iterSection->second[L] == strVal)
            return olr_Continue;
      }
      iterSection->second.push_back(strVal);

      return olr_Continue;
   }
};
/////////////////////////////////////////////////////////////////////////////
// class TKIniFile::TReader impl
/////////////////////////////////////////////////////////////////////////////
K_mf(std::string) TKIniFile::TReader::Trim (const std::string& str)
{
   if (str.empty())
      return std::string();

   const char* beg    = str.c_str();
   const char* newBeg = SkipSpaces(beg);

   if (!newBeg)
      return std::string();

   const char* end    = strchr(newBeg, 0);
   const char* newEnd = SkipEndSpaces(newBeg, end);

   if (newBeg == beg && newEnd == end)
      return str;

   return std::string(newBeg, newEnd);
}


/////////////////////////////////////////////////////////////////////////////
// class TKIniFile impl
/////////////////////////////////////////////////////////////////////////////
K_ctor TKIniFile::TKIniFile (char remChar)
   : IsModify_  (false)
   , RemarkChar_(remChar)
{
   #if defined(K_WINDOWS)
   if (RemarkChar_ == ' ')  RemarkChar_ = ';';
   #else
   if (RemarkChar_ == ' ')  RemarkChar_ = '#';
   #endif
}
//---------------------------------------------------------------------------

K_ctor TKIniFile::TKIniFile (const char* ccpFilePath, char remChar)
   : FilePath_  (ccpFilePath)
   , IsModify_  (false)
   , RemarkChar_(remChar)
{
   #if defined(K_WINDOWS)
   if (RemarkChar_ == ' ')  RemarkChar_ = ';';
   #else
   if (RemarkChar_ == ' ')  RemarkChar_ = '#';
   #endif

   FileRead();
}
//---------------------------------------------------------------------------

K_dtor TKIniFile::~TKIniFile ()
{
   Flush();
}
//---------------------------------------------------------------------------

K_mf(void) TKIniFile::FileRead (const std::string& strFilePath)
{
   FilePath_ = strFilePath;

//ccntw
fprintf(stderr, "start reader:%s\n", FilePath_.c_str());
   TReader reader(strFilePath, Sections_, RemarkChar_);
fprintf(stderr, "end reader:\n");
}
//---------------------------------------------------------------------------

K_mf(void) TKIniFile::FileWrite ()
{
   static const char New_Line[] = { "\r\n" };

   TFile     file(FilePath_.c_str(), (TFileMode)(fmWrite|fmTrunc|fmCreatePath));
   TSection* section;
   char      caBuf[1024];

   for (TSectionsI iterSections=Sections_.begin(); iterSections!=Sections_.end(); ++iterSections) {
      section = &(iterSections->second);

      sprintf(caBuf, "[%s]%s", iterSections->first.c_str(), New_Line);
      file.Write(caBuf);
      
      //fprintf(stderr, "<TKIniFile::FileWrite> [%s]\n", iterSections->first.c_str());

      for (TSectionI iterSection=section->begin(); iterSection!=section->end(); ++iterSection) {
         for(int L = 0; L < iterSection->second.size(); L++){
            sprintf(caBuf, "%s=%s%s", iterSection->first.c_str(), iterSection->second[L].c_str(), New_Line);
            file.Write(caBuf);
         }
         
         //fprintf(stderr, "<TKIniFile::FileWrite> %s=%s\n", iterSection->first.c_str(), iterSection->second.c_str());
      }

      file.Write(New_Line);
   }

   IsModify_ = false;
}
//---------------------------------------------------------------------------

K_mf(std::string) TKIniFile::MakeLowercase (const std::string& strSrc) const
{
   std::string            strDst(strSrc);
   std::string::size_type len = strDst.length();
      
   for (std::string::size_type i=0; i<len; ++i)
      strDst[i] = tolower(strSrc[i]);

   return strDst;
}
//---------------------------------------------------------------------------

K_mf(bool) TKIniFile::Read (const std::string& strSection, const std::string& strIdent, std::string& strVal)
{
   TSectionsI iterSections = Sections_.find(strSection);
   if (iterSections == Sections_.end())
      return false;

   TSection* section     = &(iterSections->second);
   TSectionI iterSection = section->find(strIdent);
   if (iterSection == section->end())
      return false;

   strVal = iterSection->second[0];
   return true;
}
//---------------------------------------------------------------------------
K_mf(int) TKIniFile::ReadStrings(const std::string& strSection, const std::string& strIdent, TStrings& strs)
{
   TSectionsI iterSections = Sections_.find(strSection);
   if (iterSections == Sections_.end())
      return false;

   TSection* section     = &(iterSections->second);
   TSectionI iterSection = section->find(strIdent);
   if (iterSection == section->end())
      return false;

   strs = iterSection->second;
   return iterSection->second.size();
}
//---------------------------------------------------------------------------

K_mf(bool) TKIniFile::GetBool (const std::string& strVal) const
{
   if (strVal.empty())  return false;

   std::string strLowVal = MakeLowercase(strVal);
   char        ch        = strLowVal[0];

   // 1:0, t:f, y:n, true:false
   if (ch == '1' || ch == 't' || ch == 'y' || strLowVal == True_String)
      return true;

   return false;
}
//---------------------------------------------------------------------------

K_mf(bool) TKIniFile::ReadBool (const std::string& strSection, const std::string& strIdent, bool bDefault)
{
   std::string strVal;
      
   if (Read(strSection, strIdent, strVal))
      return GetBool(strVal);
      
   return bDefault;
}
//---------------------------------------------------------------------------

K_mf(int) TKIniFile::ReadInt (const std::string& strSection, const std::string& strIdent, int nDefault)
{
   std::string strVal;
      
   if (Read(strSection, strIdent, strVal))
      return atoi(strVal.c_str());

   return nDefault;
}
//---------------------------------------------------------------------------

K_mf(std::string) TKIniFile::ReadString (const std::string& strSection, const std::string& strIdent, const std::string& strDefault)
{
   std::string strVal;
      
   if (Read(strSection, strIdent, strVal))
      return strVal;
      
   return strDefault;
}
//---------------------------------------------------------------------------

K_mf(std::string&) TKIniFile::GetVal (const std::string& strSection, const std::string& strIdent)
{
   TSectionsI iterSections = Sections_.fetch(strSection);
   TSection*  section      = &(iterSections->second);
   TSectionI  iterSection  = section->fetch(strIdent);
   if(iterSection->second.size() == 0)
      iterSection->second.push_back(std::string());
   return iterSection->second[0];
}
//---------------------------------------------------------------------------

K_mf(void) TKIniFile::SetBool (std::string& strVal, bool nNewVal)
{
   if (nNewVal)  strVal = True_String;
   else          strVal = False_String;
}
//---------------------------------------------------------------------------

K_mf(void) TKIniFile::WriteBool (const std::string& strSection, const std::string& strIdent, bool bNewVal)
{
   std::string& strVal = GetVal(strSection, strIdent);

   if (GetBool(strVal) != bNewVal) {
      SetBool(strVal, bNewVal);

      IsModify_ = true;
   }
}
//---------------------------------------------------------------------------

K_mf(void) TKIniFile::WriteInt (const std::string& strSection, const std::string& strIdent, int nNewVal)
{
   std::string& strVal = GetVal(strSection, strIdent);

   if (strVal.empty() || atoi(strVal.c_str()) != nNewVal) {
      char caInt[20];
      
      sprintf(caInt, "%d", nNewVal);
      strVal.assign(caInt);
      IsModify_ = true;
   }
}
//---------------------------------------------------------------------------

K_mf(void) TKIniFile::WriteString (const std::string& strSection, const std::string& strIdent, const std::string& strNewVal)
{
   std::string& strVal = GetVal(strSection, strIdent);

   if (strVal.empty() || strVal != strNewVal) {
      strVal    = strNewVal;
      IsModify_ = true;
   }
}
//---------------------------------------------------------------------------
K_mf(void) TKIniFile::WriteStrings (const std::string& strSection, const std::string& strIdent, const std::string& strNewVal)
{
   TSectionsI iterSections = Sections_.fetch(strSection);
   TSection*  section      = &(iterSections->second);
   TSectionI  iterSection  = section->fetch(strIdent);
   for(int L = 0; L < iterSection->second.size(); L++){
      if(iterSection->second[L] == strNewVal)
         return;
   }
   iterSection->second.push_back(strNewVal);
   IsModify_ = true;
}
//---------------------------------------------------------------------------
K_mf(void) TKIniFile::AppendValue (const std::string& strSection, const std::string& strIndent,
                                   const std::string& strVal,     size_t newSize)
{
   TSectionsI         iterSections = Sections_.fetch(strSection);
   TSection*          section      = &(iterSections->second);
   TSectionI          iterSection  = section->fetch(strIndent);
   TStrings&          vtString     = iterSection->second;
   TStrings::iterator iterStrings  = vtString.begin();

   for (; iterStrings!=vtString.end(); ++iterStrings) {
      if (*iterStrings == strVal)
         break;
   }
   if (iterStrings == vtString.end()) {
      vtString.push_back(strVal);
      IsModify_ = true;
   }

   size_t mySize = vtString.size();

   if (mySize > newSize) {
      TStrings           vtString2(vtString);
      TStrings::iterator iter = (vtString2.begin() + (mySize - newSize));

      vtString.clear();
      for (; iter!=vtString2.end(); ++iter) {
         vtString.push_back(*iter);
      }
      IsModify_ = true;
   }
}
//---------------------------------------------------------------------------
K_mf(void) TKIniFile::EraseSection(const std::string& strSection)
{
   TSectionsI iterSections = Sections_.find(strSection);
   if(iterSections != Sections_.end()){
      Sections_.erase(iterSections);
      IsModify_ = true;
   }
}
//---------------------------------------------------------------------------
K_mf(void) TKIniFile::EraseIndent(const std::string& strSection, const std::string& strIdent)
{
   TSectionsI iterSections = Sections_.find(strSection);
   if(iterSections == Sections_.end())
      return;
   TSection*  section      = &(iterSections->second);
   TSectionI  iterSection  = section->find(strIdent);
   if(iterSection != section->end()){
      section->erase(iterSection);
      IsModify_ = true;
   }
}
//---------------------------------------------------------------------------
K_mf(void) TKIniFile::EraseValue(const std::string& strSection, const std::string& strIdent, const std::string& strval)
{
   TSectionsI iterSections = Sections_.find(strSection);
   if(iterSections == Sections_.end())
      return;
   TSection*  section      = &(iterSections->second);
   TSectionI  iterSection  = section->find(strIdent);
   if(iterSection == section->end())
      return;
   for(TStrings::iterator L = iterSection->second.begin(); L != iterSection->second.end(); L++)
      if((*L) == strval){
         iterSection->second.erase(L);
         IsModify_ = true;
         break;
      }
   if(iterSection->second.size() == 0)
      section->erase(iterSection);
}
//---------------------------------------------------------------------------
K_mf(bool) TKIniFile::CopySection(const std::string& orig, const std::string& dupto)
{
   TSectionsI iter1 = Sections_.find(orig);
   TSectionsI iter2 = Sections_.find(dupto);
   if(iter1 != Sections_.end() && iter2 == Sections_.end()){
      iter2 = Sections_.fetch(dupto);
      iter2->second = iter1->second;
      IsModify_ = true;
      return true;
   }
   return false;
}
//---------------------------------------------------------------------------
